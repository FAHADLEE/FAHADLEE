// import React, { useState, useEffect } from 'react';
// import './NavigationMap.css';
// import axios from 'axios';
// import { GoogleMap, Marker, DirectionsRenderer } from '@react-google-maps/api';
// import CustomsPopup from './CustomsPopup';
// import PlacesAutocomplete, { geocodeByAddress } from 'react-places-autocomplete';


// const MapContainer = ({ location, onLoad, onUnmount, onMapClick, clickedLocation, directions, savedDetails, onMarkerClick, onMarkerRemove, setMarkerType }) => {
//     const mapStyles = {
//         height: '90vh',
//         width: '100%',
//     };

//     return (
//         <GoogleMap
//             mapContainerStyle={mapStyles}
//             center={location}
//             zoom={15}
//             onLoad={onLoad}
//             onUnmount={onUnmount}
//             onClick={onMapClick}
//         >
//             {/* Main marker for the current location */}
//             <Marker position={location} />

//             {/* Marker for the clicked location */}
//             {clickedLocation && (
//                 <Marker
//                     position={clickedLocation}
//                     icon={{ url: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png' }}
//                     onClick={() => setMarkerType('end')}
//                 />
//             )}

//             {/* Popup for saved details */}
//             {savedDetails &&
//                 savedDetails.length > 0 &&
//                 savedDetails.map((detail, index) => (
//                     <Marker
//                         key={index}
//                         position={detail.location}
//                         icon={{ url: 'http://maps.google.com/mapfiles/ms/icons/green-dot.png' }}
//                         onClick={() => onMarkerClick(index)}
//                     />
//                 ))}

//             {directions && <DirectionsRenderer directions={directions} options={{ suppressMarkers: true, preserveViewport: true }} />}
//         </GoogleMap>
//     );
// };

// const NavigationMap = () => {
//     const [searchTerm, setSearchTerm] = useState('');
//     const [location, setLocation] = useState({ lat: 13.0827, lng: 80.2707 });
//     const [currentDate, setCurrentDate] = useState(new Date());
//     const [popupVisible, setPopupVisible] = useState(false);
//     const [clickedLocation, setClickedLocation] = useState(null);
//     const [formData, setFormData] = useState({
//         daytime: '',
//         Type: 'start', // Default to 'start'
//         day: '',
//       });
      
//     const [directions, setDirections] = useState(null);
//     const [savedDetails, setSavedDetails] = useState([]);
//     const [selectedMarkerIndex, setSelectedMarkerIndex] = useState(null);
//     const [markerType, setMarkerType] = useState('start'); // 'start', 'end', 'waypoint'

//     useEffect(() => {
//         // Load saved details from local storage
//         const savedDetails = JSON.parse(localStorage.getItem('savedDetails')) || [];
//         setSavedDetails(savedDetails);
//     }, []);

//     useEffect(() => {
//         const fetchData = async () => {
//             try {
//                 const response = await axios.get(
//                     `https://maps.googleapis.com/maps/api/geocode/json?address=${searchTerm}&key=AIzaSyAKgTjrRsR4GqXNKOp8RNc3WfMaAv8hVSU`
//                 );

//                 if (response.data.results.length > 0) {
//                     const { lat, lng } = response.data.results[0].geometry.location;

//                     // Check if location is not null before accessing properties
//                     if (location && location.lat && location.lng) {
//                         setLocation({ lat, lng });
//                     } else {
//                         console.error('location is null or missing properties.');
//                     }

//                     // Fetch directions only if clickedLocation is not null
//                     if (clickedLocation && clickedLocation.lat && clickedLocation.lng) {
//                         const directionsResponse = await axios.get(
//                             `https://maps.googleapis.com/maps/api/directions/json?origin=${location.lat},${location.lng}&destination=${clickedLocation.lat},${clickedLocation.lng}&key=AIzaSyAKgTjrRsR4GqXNKOp8RNc3WfMaAv8hVSU`
//                         );

//                         const directionsResult = directionsResponse.data;
//                         if (directionsResult.routes.length > 0) {
//                             setDirections(directionsResult);
//                         } else {
//                             console.error('No routes found.');
//                         }
//                     } else {
//                         console.error('clickedLocation is null or missing properties.');
//                     }
//                 } else {
//                     console.error('No results found for the provided address.');
//                 }
//             } catch (error) {
//                 console.error('Error fetching location:', error);
//                 console.error('Error details:', error.response, error.request);
//             }
//         };

//         if (searchTerm) {
//             fetchData();
//         }

//         // Update the current date every minute
//         const intervalId = setInterval(() => {
//             setCurrentDate(new Date());
//         }, 60000);

//         // Set default values for modal form
//         setFormData({
//             daytime: '',
//             Type: 'start', // Default to 'start'
//             day: '',
//         });

//         // Clear the interval when the component is unmounted
//         return () => clearInterval(intervalId);
//     }, [searchTerm, clickedLocation, location, markerType, formData.Type]);



//     const formattedDate = `${currentDate.getFullYear()}/${(currentDate.getMonth() + 1).toString().padStart(2, '0')}/${currentDate
//         .getDate()
//         .toString()
//         .padStart(2, '0')}`;


//     const handleFormSubmit = async (e) => {
//         e.preventDefault();

//         if (markerType === 'end' && formData.Type) {
//             // Fetch directions based on the start and end locations with waypoints
//             const directionsService = new window.google.maps.DirectionsService();
//             const start = location;
//             const end = clickedLocation;
//             const waypoints = savedDetails
//                 .filter((detail) => detail.Type === 'waypoint')
//                 .map((detail) => ({ location: detail.location }));

//             directionsService.route(
//                 {
//                     origin: start,
//                     destination: end,
//                     travelMode: window.google.maps.TravelMode.DRIVING,
//                     waypoints: waypoints,
//                     optimizeWaypoints: true, // Optional: Optimizes the order of waypoints for the shortest path
//                 },
//                 (result, status) => {
//                     if (status === window.google.maps.DirectionsStatus.OK) {
//                         setDirections(result);
//                     } else {
//                         console.error('Directions request failed. Status:', status);
//                     }
//                 }
//             );
//         }

//         const newDetails = {
//             day: formData.day,
//             daytime: formData.daytime,
//             Type: formData.Type,
//             location: clickedLocation,
//         };

//         const updatedDetails = [...savedDetails, newDetails];
//         localStorage.setItem('savedDetails', JSON.stringify(updatedDetails));

//         // Close the popup
//         handlePopupClose();
//     };

//     const handleMapClick = async (e) => {
//         try {
//             const clickedLocation = {
//                 lat: e.latLng.lat(),
//                 lng: e.latLng.lng(),
//             };
//             setClickedLocation(clickedLocation);

//             const results = await geocodeByAddress(`${clickedLocation.lat},${clickedLocation.lng}`);
//             const address = results[0].formatted_address;
//             setSearchTerm(address);


//             // Update the search term with the clicked location's address
//             setSearchTerm(address);
//             setPopupVisible(true);
//         } catch (error) {
//             console.error('Error handling map click:', error);
//         }
//     };

//     const handlePopupClose = () => {
//         // Close the popup and reset the form data
//         setPopupVisible(false);
//         setSelectedMarkerIndex(null);
//         setClickedLocation(null);
//         setMarkerType('start'); // Reset marker type to 'start'
//         setFormData({
//             daytime: '',
//             Type: 'start', // Default to 'start'
//             day: '',
//         });
//     };

//     const handleMarkerClick = (index) => {
//         // Handle click on the marker to display details
//         console.log('Marker clicked. Details:', savedDetails[index]);
//         // Set the index to show details popup
//         setPopupVisible(true);
//         setSelectedMarkerIndex(index);
//         setFormData({
//             day: savedDetails[index].day,
//             daytime: savedDetails[index].daytime,
//             Type: savedDetails[index].Type,
//         });
//     };

//     const handleMarkerRemove = (index) => {
//         // Handle marker removal logic
//         // Remove the selected marker from savedDetails
//         const updatedDetails = savedDetails.filter((_, i) => i !== index);
//         localStorage.setItem('savedDetails', JSON.stringify(updatedDetails));
//         setSavedDetails(updatedDetails);

//         // Close the popup
//         handlePopupClose();
//     };


//     return (
//         <>
//             <div>
//                 <PlacesAutocomplete
//                     className="search-bar-container"
//                     value={searchTerm}
//                     onChange={(newValue) => setSearchTerm(newValue)}
//                 >
//                     {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (
//                         <div className="search-input-field">
//                             <input
//                                 {...getInputProps({
//                                     placeholder: 'Enter location',
//                                 })}
//                             />
//                             <div>
//                                 {loading && <div>Loading...</div>}
//                                 {suggestions.map((suggestion) => (
//                                     <div {...getSuggestionItemProps(suggestion)}>{suggestion.description}</div>
//                                 ))}
//                             </div>
//                             <p>Current Date: {formattedDate}</p>
//                         </div>
//                     )}
//                 </PlacesAutocomplete>

//                 <MapContainer
//                     location={location}
//                     onLoad={(map) => {
//                         console.log('Map loaded:', map);
//                     }}
//                     onUnmount={(map) => {
//                         console.log('Map unmounted:', map);
//                     }}
//                     onMapClick={handleMapClick}
//                     clickedLocation={clickedLocation}
//                     directions={directions}
//                     savedDetails={savedDetails}
//                     onMarkerClick={handleMarkerClick}
//                     onMarkerRemove={handleMarkerRemove}
//                     markerType={markerType}
//                     setMarkerType={setMarkerType}
//                 />
//             </div>
//             <div>
//                 {popupVisible && (
//                     <CustomsPopup
//                         formData={formData}
//                         initialFormData={{ day: '', daytime: '', Type: 'start' }}
//                         onClose={() => {
//                             // Reset form data and close the popup
//                             setPopupVisible(false);
//                             setMarkerType('start'); // Reset marker type to 'start'
//                             setFormData({
//                                 daytime: '',
//                                 Type: 'start', // Default to 'start'
//                                 day: '',
//                             });
//                         }}
//                         onSubmit={handleFormSubmit}
//                         onChange={(field, value) => setFormData({ ...formData, [field]: value })}
//                         isStartType={markerType === 'start'} // Pass a boolean indicating if it's a starting point
//                         selectedDetail={selectedMarkerIndex !== null ? savedDetails[selectedMarkerIndex] : null} // Pass the selected detail for editing
//                     />
//                 )}
//             </div>
//         </>
//     );
// };

// export default NavigationMap;